package com.unionblue.wechat.controller;

import com.thoughtworks.xstream.XStream;
import com.unionblue.wechat.model.WechatUser;
import com.unionblue.wechat.service.WechatSservice;
import com.unionblue.wechat.util.SignUtil;
import com.unionblue.wechat.wechatService.message.DefaultMessageHandlerImpl;
import com.unionblue.wechat.wechatService.message.IMessageHandler;
import com.unionblue.wechat.wechatService.message.InputMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.weixin4j.Configuration;
import org.weixin4j.message.Articles;
import org.weixin4j.message.OutputMessage;
import org.weixin4j.message.TextOutputMessage;
import org.weixin4j.util.XStreamFactory;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Date;

@Controller
public class WechatController {
    protected static final Logger logger = LoggerFactory.getLogger(WechatController.class);
    @Autowired
    private WechatSservice wechatSservice;
    @RequestMapping(value = "/weixin/push" ,method = RequestMethod.GET)
    public void weixinPush(HttpServletRequest request, HttpServletResponse response) throws IOException {

        String signature = request.getParameter("signature");
        // 时间戳
        String timestamp = request.getParameter("timestamp");
        // 随机数
        String nonce = request.getParameter("nonce");
        // 随机字符串
        String echostr = request.getParameter("echostr");

        PrintWriter
                out = response.getWriter();
        // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败
        if (SignUtil.checkSignature(signature, timestamp, nonce)) {
            out.print(echostr);
            System.out.println("微信服务验证成功！" + echostr);
        } else {
            out.print(echostr);
            System.out.println("微信服务验证失败！" + echostr);

            //return service.testInfo(info) ;
            //return "Hello World!";
        }
    }


    //当普通微信用户向公众账号发消息时，微信服务器将POST消息的XML数据包到开发者填写的URL上
    //用户在关注与取消关注公众号时，微信会把这个事件推送到开发者填写的URL
    //用户每次发送语音给公众号时，微信会在推送的语音消息XML数据包中，增加一个Recongnition字段
    @RequestMapping(value = "/weixin/push" ,method = RequestMethod.POST)
    public void weixinPushPost(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        IMessageHandler messageHandler = null;
      //  String defaultHandler = "org.weixin4j.spi.DefaultMessageHandler";
        InputMessage inputMsg = null;
        OutputMessage outputMsg = null;
        try {
            response.setCharacterEncoding("UTF-8");
            response.setContentType("text/xml");
            messageHandler=new DefaultMessageHandlerImpl();
            if (Configuration.isDebug()) {
                System.out.println("IMessageHandler创建成功!");
            }
            //获取POST流
            ServletInputStream in = request.getInputStream();
            if (Configuration.isDebug()) {
                System.out.println("                !");
            }
            //将POST流转换为XStream对象
            XStream xs = XStreamFactory.init(false);
            if (Configuration.isDebug()) {
                System.out.println("将POST流转换为XStream对象成功!");
            }
            //将指定节点下的xml节点数据转换为对象
            xs.alias("xml", InputMessage.class);
            if (Configuration.isDebug()) {
                System.out.println("将指定节点下的xml节点数据转换为对象成功!");
            }
            //将流转换为字符串
            String xmlMsg = XStreamFactory.inputStream2String(in);
            if (Configuration.isDebug()) {
                System.out.println("获取POST的消息:[" + xmlMsg + "]");
            }
            //将xml内容转换为InputMessage对象
            inputMsg = (InputMessage) xs.fromXML(xmlMsg);

            // 取得消息类型
            String MsgType = inputMsg.getMsgType();
            if (Configuration.isDebug()) {
                System.out.println("POST的消息类型:[" + MsgType + "]");
            }
         //   获取消息处理方法
           Method mt = messageHandler.getClass().getMethod(MsgType + "TypeMsg", InputMessage.class);
           // Method mt=messageHandler.textTypeMsg(inputMsg);
            //调用处理方法，返回输出流对象
            outputMsg = (OutputMessage) mt.invoke(messageHandler, inputMsg);
           // outputMsg= messageHandler.textTypeMsg(inputMsg);
            if (outputMsg == null) {
                //告知用户错误信息
                outputMsg = new TextOutputMessage();
                ((TextOutputMessage) outputMsg).setContent("欢迎来到蓝联退税!");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            outputMsg = new TextOutputMessage();
            ((TextOutputMessage) outputMsg).setContent("系统错误!");
        }
        try {
            setOutputMsgInfo(outputMsg, inputMsg);
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        // 把发送发送对象转换为xml输出
        XStream xs = XStreamFactory.init(true);
        xs.alias("xml", outputMsg.getClass());
        xs.alias("item", Articles.class);
        String xml = xs.toXML(outputMsg);
        if (Configuration.isDebug()) {
            System.out.println("POST输出消息:[" + xml + "]");
        }
        response.getWriter().write(xml);
    }

    //设置详细信息
    private static void setOutputMsgInfo(OutputMessage oms, InputMessage msg)
            throws Exception {
        // 设置发送信息
        Class<?> outMsg = oms.getClass().getSuperclass();
        Field CreateTime = outMsg.getDeclaredField("CreateTime");
        Field ToUserName = outMsg.getDeclaredField("ToUserName");
        Field FromUserName = outMsg.getDeclaredField("FromUserName");

        ToUserName.setAccessible(true);
        CreateTime.setAccessible(true);
        FromUserName.setAccessible(true);

        CreateTime.set(oms, new Date().getTime());
        ToUserName.set(oms, msg.getFromUserName());
        FromUserName.set(oms, msg.getToUserName());
    }

    @RequestMapping(value = "/user", method = RequestMethod.GET)
    public String user(String code, Model model, HttpSession session,HttpServletRequest request) {
        logger.info("1获取到code值---->"+code);
        code= request.getParameter("code");
        logger.info("2获取到code值---->"+code);
        String openid = wechatSservice.codeGetOpenid(code);
        logger.info(openid);


        //https://api.weixin.qq.com/cgi-bin/user/info?access_token='.$access_token.'&openid='.$openId.'&lang=zh_CN
        WechatUser wechatUser = wechatSservice.getWechatUser(openid,wechatSservice.getAccess_token());
//        if (null == wechatUser) {
//            model.addAttribute("title", "请从微信公众号进入");
//            return "notInWechat";
//        }
//        System.out.println("wechatUser:" + wechatUser);
//        session.setAttribute("wechatUser", wechatUser);
        System.out.println("wechatUser:" + wechatUser);
        //model.addAttribute("wechatUser", wechatUser);
        request.getSession().setAttribute("headImgUrl", wechatUser.getHeadimgurl());
        request.getSession().setAttribute("nickName", wechatUser.getNickname());
        request.getSession().setAttribute("openId", wechatUser.getOpenid());
        model.addAttribute("time", System.currentTimeMillis());
        return "/index";
    }


}
